{"version":3,"sources":["cat.js"],"names":["myData","retrun","show","document","getElementById","classList","toggle","startX","startScrollLeft","timeoutId","wrapper","querySelector","carousel","firstCardWidth","offsetWidth","querySelectorAll","carouselChildrens","_toConsumableArray","children","isDragging","isAutoPlay","cardPerView","Math","round","slice","forEach","arrowBtns","insertAdjacentHTML","card","outerHTML","add","remove","btn","addEventListener","scrollLeft","dragging","e","pageX","infiniteScroll","scrollWidth","autoPlay","innerWidth","setTimeout","dragStop","window","clearTimeout"],"mappings":"8dAAA,SAASA,SACPC,OAGF,SAASC,OACPC,SAASC,eAAe,mBAAmBC,UAAUC,OAAO,UAG9D,IAJgBC,OAAAC,gBAAAC,UAIVC,QAAUP,SAASQ,cAAc,YACjCC,SAAWT,SAASQ,cAAc,aATxCE,eAAkBD,SAAAD,cAAA,SAAAG,YAChBb,UAAME,SAAAY,iBAAA,cACPC,kBAAAC,mBAAAL,SAAAM,UAEDC,YAAgB,EAAAC,YAAA,EAaZC,YAAcC,KAAKC,MAAMX,SAASE,YAAcD,gBAPpDG,kBAAoBQ,OAAGZ,aAASD,UAAcc,QAASX,SAAAA,GACjDY,SAASC,mBAAYZ,aAAiBa,EAAAC,aAG5Cb,kBAAiBQ,MAAjB,EAAAH,aAAAI,QAAA,SAAAG,GAAwBR,SAAAA,mBAAxB,YAAAQ,EAAAC,aAgBAjB,SAASP,UAAUyB,IAAI,iBAbvBlB,SAAIS,WAAkBT,SAAOA,YAe7BA,SAASP,UAAU0B,OAAO,iBAVzBL,UAEDD,QAAA,SAAAO,GAYIA,EAAIC,iBAAiB,QAAS,WAXlCjB,SAAiBkB,YAAuBT,QAAbJ,EAAAA,IAAqBR,eAAQA,mBAKxDD,IAAAA,UAAA,SAAmBkB,GACnBlB,YAASsB,EACTtB,SAASP,UAAU0B,IAAO,YAG1BL,OAAUD,EAAAA,MACNO,gBAAApB,SAAAsB,YADJC,SAAA,SAAAC,GAeQjB,aARJA,SAAUe,WAAV1B,iBAAA4B,EAAAC,MAAA9B,UAGAA,SAAW8B,WACX7B,YAAe,EALnBI,SAAAP,UAAA0B,OAAA,aASOO,eAAa,WAYW,IAAxB1B,SAASsB,YAVZtB,SAASsB,UAAa1B,IAAAA,iBAH1BI,SAAAsB,WAAAtB,SAAA2B,YAAA,EAAA3B,SAAAE,YAgBQF,SAASP,UAAU0B,OAAO,kBARrB1B,KAAAA,KAAU0B,SAAOG,cAA1BtB,SAAA2B,YAAA3B,SAAAE,cAFJF,SAAAP,UAAAyB,IAAA,iBAeQlB,SAASsB,WAAatB,SAASE,YAVjCwB,SAAAA,UAAiBP,OAAjBO,kBAIE1B,aAASsB,WACTtB,QAASP,QAAU0B,WAAOS,YAI1B5B,SAASP,WACTO,OAAQ6B,WAAR,MAAsB7B,aAEzBH,UAEDiC,WAAA,WAAA,OAAA9B,SAAAsB,YAAArB,gBAAA,QAUJ2B,WARI5B,SAAIF,iBAAgB,YAAW8B,WAClC5B,SAjBDqB,iBAAA,YAAAE,UA4BAhC,SAAS8B,iBAAiB,UAAWU,UATrC/B,SAAM4B,iBAAAA,SAAiBF,gBACnB5B,QAAGkC,iBAAA,aAA4BxB,WAAAA,OAA/ByB,aAAmDpC,aACnDC,QAAAuB,iBAAA,aAAAO","file":"cat.min.js","sourcesContent":["function myData() {\r\n  retrun;\r\n}\r\n\r\nfunction show() {\r\n  document.getElementById('anotherFunction').classList.toggle('Active');\r\n}\r\n\r\nconst wrapper = document.querySelector(\".wrapper\");\r\nconst carousel = document.querySelector(\".carousel\");\r\nconst firstCardWidth = carousel.querySelector(\".card\").offsetWidth;\r\nconst arrowBtns = document.querySelectorAll(\".wrapper i\");\r\nconst carouselChildrens = [...carousel.children];\r\n\r\nlet isDragging = false, isAutoPlay = true, startX, startScrollLeft, timeoutId;\r\n\r\n// Get the number of cards that can fit in the carousel at once\r\nlet cardPerView = Math.round(carousel.offsetWidth / firstCardWidth);\r\n\r\n// Insert copies of the last few cards to beginning of carousel for infinite scrolling\r\ncarouselChildrens.slice(-cardPerView).reverse().forEach(card => {\r\n    carousel.insertAdjacentHTML(\"afterbegin\", card.outerHTML);\r\n});\r\n\r\n// Insert copies of the first few cards to end of carousel for infinite scrolling\r\ncarouselChildrens.slice(0, cardPerView).forEach(card => {\r\n    carousel.insertAdjacentHTML(\"beforeend\", card.outerHTML);\r\n});\r\n\r\n// Scroll the carousel at appropriate postition to hide first few duplicate cards on Firefox\r\ncarousel.classList.add(\"no-transition\");\r\ncarousel.scrollLeft = carousel.offsetWidth;\r\ncarousel.classList.remove(\"no-transition\");\r\n\r\n// Add event listeners for the arrow buttons to scroll the carousel left and right\r\narrowBtns.forEach(btn => {\r\n    btn.addEventListener(\"click\", () => {\r\n        carousel.scrollLeft += btn.id == \"left\" ? -firstCardWidth : firstCardWidth;\r\n    });\r\n});\r\n\r\nconst dragStart = (e) => {\r\n    isDragging = true;\r\n    carousel.classList.add(\"dragging\");\r\n    // Records the initial cursor and scroll position of the carousel\r\n    startX = e.pageX;\r\n    startScrollLeft = carousel.scrollLeft;\r\n}\r\n\r\nconst dragging = (e) => {\r\n    if(!isDragging) return; // if isDragging is false return from here\r\n    // Updates the scroll position of the carousel based on the cursor movement\r\n    carousel.scrollLeft = startScrollLeft - (e.pageX - startX);\r\n}\r\n\r\nconst dragStop = () => {\r\n    isDragging = false;\r\n    carousel.classList.remove(\"dragging\");\r\n}\r\n\r\nconst infiniteScroll = () => {\r\n    // If the carousel is at the beginning, scroll to the end\r\n    if(carousel.scrollLeft === 0) {\r\n        carousel.classList.add(\"no-transition\");\r\n        carousel.scrollLeft = carousel.scrollWidth - (2 * carousel.offsetWidth);\r\n        carousel.classList.remove(\"no-transition\");\r\n    }\r\n    // If the carousel is at the end, scroll to the beginning\r\n    else if(Math.ceil(carousel.scrollLeft) === carousel.scrollWidth - carousel.offsetWidth) {\r\n        carousel.classList.add(\"no-transition\");\r\n        carousel.scrollLeft = carousel.offsetWidth;\r\n        carousel.classList.remove(\"no-transition\");\r\n    }\r\n\r\n    // Clear existing timeout & start autoplay if mouse is not hovering over carousel\r\n    clearTimeout(timeoutId);\r\n    if(!wrapper.matches(\":hover\")) autoPlay();\r\n}\r\n\r\nconst autoPlay = () => {\r\n    if(window.innerWidth < 800 || !isAutoPlay) return; // Return if window is smaller than 800 or isAutoPlay is false\r\n    // Autoplay the carousel after every 2500 ms\r\n    timeoutId = setTimeout(() => carousel.scrollLeft += firstCardWidth, 2500);\r\n}\r\nautoPlay();\r\n\r\ncarousel.addEventListener(\"mousedown\", dragStart);\r\ncarousel.addEventListener(\"mousemove\", dragging);\r\ndocument.addEventListener(\"mouseup\", dragStop);\r\ncarousel.addEventListener(\"scroll\", infiniteScroll);\r\nwrapper.addEventListener(\"mouseenter\", () => clearTimeout(timeoutId));\r\nwrapper.addEventListener(\"mouseleave\", autoPlay);"]}